# -*- coding: utf-8 -*-
"""
server.py ‚Äî BGSÁôæÂÆ∂Ê®ÇAI Âπ≥Ë°°È†êÊ∏¨Ôºà‰øÆÊ≠£„ÄéÂè™ÊäºËéä„ÄèÂÅèÁΩÆ + Êï∏ÂÄºÂÅ•Â£ØÂåñÁâàÔºâ
ÁâπÈªûÔºö
1) OutcomePF Á≤íÂ≠êÊøæÊ≥¢ÔºàËã•ËºâÂÖ•Â§±ÊïóËá™ÂãïÈùúÊÖãÊ©üÁéáÔºâ
2) EV Ê±∫Á≠ñÂê´ÊäΩÊ∞¥„ÄÅËßÄÊúõÈñÄÊ™ª„ÄÅËøë‰ººÊâìÂπ≥ËßÄÊúõ
3) Â∞ç„ÄéËéä„ÄèÂä†ÂÖ•ÂèØË™øÂèçÂêëÂÅèÁΩÆÔºåÈÅøÂÖçÈï∑ÊúüÂè™ÊäºËéä
4) 30 ÂàÜÈêòË©¶Áî®Âà∞ÊúüÊèêÁ§∫ + LINE Âø´ÈÄüÊåâÈàï
"""

import os, sys, re, time, json, logging
from typing import Dict, Any
import numpy as np

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("bgs-server")

# ----------------- Flask -----------------
try:
    from flask import Flask, request, jsonify
    from flask_cors import CORS
    _has_flask = True
except Exception:
    _has_flask = False
    Flask = None
    def jsonify(*_, **__): raise RuntimeError("Flask not available")
    def CORS(*_, **__): pass

if _has_flask:
    app = Flask(__name__)
    CORS(app)
    @app.get("/")
    def root():
        return "‚úÖ BGS PF Server OK", 200
else:
    class _DummyApp:
        def get(self, *a, **k):
            def deco(f): return f
            return deco
        def post(self, *a, **k):
            def deco(f): return f
            return deco
        def run(self, *a, **k): print("Flask not installed; dummy app.")
    app = _DummyApp()

# ----------------- Redis (optional) -----------------
try:
    import redis
except Exception:
    redis = None

REDIS_URL = os.getenv("REDIS_URL", "")
rcli = None
if redis and REDIS_URL:
    try:
        rcli = redis.from_url(REDIS_URL, decode_responses=True, socket_connect_timeout=2)
        rcli.ping()
        log.info("Connected Redis ok")
    except Exception as e:
        log.warning("Redis disabled: %s", e)
        rcli = None

# ----------------- Session -----------------
SESS: Dict[str, Dict[str, Any]] = {}
SESSION_EXPIRE = 3600

# ---------- Tunables ----------
os.environ.setdefault("BANKER_COMMISSION", "0.05")

# ÈÄ≤Âá∫Â†¥ÔºèËßÄÊúõÂèÉÊï∏
os.environ.setdefault("EDGE_ENTER_EV", "0.0015")   # EV Êú™ÈÅîÊ≠§ÂÄº ‚Üí ËßÄÊúõ
os.environ.setdefault("ENTER_GAP_MIN", "0.018")    # ‰∏âÈ°ûÊ©üÁéáTop2Â∑ÆË∑ùÂ§™Â∞è ‚Üí ËßÄÊúõ
os.environ.setdefault("TIE_PROB_MAX", "0.28")      # Tie Â§™È´ò‰∏îÂÑ™Âã¢‰∏çÊòé ‚Üí ËßÄÊúõ
os.environ.setdefault("STATS_DISPLAY", "smart")

# Êñ∞Â¢ûÔºöÂÖ¨Âπ≥Èªû‰øÆÊ≠£ËàáÊâìÂπ≥ËßÄÊúõÔºàÂèØÁî® .env Ë¶ÜÂØ´Ôºâ
os.environ.setdefault("EV_BIAS_BANKER", "0.003")   # Â∞çËéäÁöÑÂèçÂêëÂÅèÁΩÆÔºàË∂äÂ§ßË∂ä‰∏çÂÆπÊòìÈÅ∏ËéäÔºâ
os.environ.setdefault("NEAR_DIFF_HOLD", "0.0025")  # |EV_B - EV_P| Â∞èÊñºÊ≠§ÂÄº ‚Üí Áõ¥Êé•ËßÄÊúõ

# ÈÖçÊ≥®
os.environ.setdefault("MIN_BET_PCT_BASE", "0.02")
os.environ.setdefault("MAX_BET_PCT", "0.35")
os.environ.setdefault("BET_UNIT", "100")

# Á≤íÂ≠êÊøæÊ≥¢Âô®ÂèÉÊï∏ÔºàÂ∞è„ÄÅÂø´Ôºâ
os.environ.setdefault("DECKS", "6")
os.environ.setdefault("PF_N", "80")
os.environ.setdefault("PF_RESAMPLE", "0.75")
os.environ.setdefault("PF_PRED_SIMS", "25")

# ----------------- PF Loader -----------------
OutcomePF = None
_pf_import_from = "none"
try:
    # ÂÑ™ÂÖàËºâÊú¨Âú∞ bgs.pfilterÔºõÂ§±ÊïóÂâáËºâÂêåÁõÆÈåÑ pfilter.py
    from bgs.pfilter import OutcomePF
    _pf_import_from = "bgs"
except Exception:
    try:
        cur = os.path.dirname(os.path.abspath(__file__))
        if cur not in sys.path: sys.path.insert(0, cur)
        from pfilter import OutcomePF
        _pf_import_from = "local"
    except Exception:
        OutcomePF = None
        _pf_import_from = "none"

PF_STATUS = {"ready": OutcomePF is not None, "error": None, "from": _pf_import_from}
log.info("OutcomePF import: %s", PF_STATUS)

class _DummyPF:
    def update_outcome(self, outcome): pass
    def update_point_history(self, p_pts, b_pts): pass
    def predict(self, **k): return np.array([0.458, 0.446, 0.096], dtype=np.float32)

def _get_pf_from_sess(sess: Dict[str, Any]) -> Any:
    """Get particle filter for the session"""
    global PF_STATUS
    if not OutcomePF:
        PF_STATUS = {"ready": False, "error": "OutcomePF module missing", "from": _pf_import_from}
        sess["_pf_dummy"] = True
        return _DummyPF()

    if sess.get("pf") is None and not sess.get("_pf_failed"):
        try:
            sess["pf"] = OutcomePF(
                decks=int(os.getenv("DECKS", "6")),
                seed=int(os.getenv("SEED", "42")) + int(time.time() % 1000),
                n_particles=int(os.getenv("PF_N", "80")),
                sims_lik=max(1, int(os.getenv("PF_UPD_SIMS", "25"))),
                resample_thr=float(os.getenv("PF_RESAMPLE", "0.75")),
                # Ê≥®ÊÑèÔºö‰∏çË¶ÅÂÇ≥ backend / dirichlet_eps Á≠â‰∏çÂ≠òÂú®ÁöÑÂèÉÊï∏
            )
            PF_STATUS = {"ready": True, "error": None, "from": _pf_import_from}
            sess.pop("_pf_dummy", None)
            log.info("OutcomePF initialised for user %s", sess.get("user_id", "unknown"))
        except Exception as exc:
            sess["_pf_failed"] = True
            sess["_pf_dummy"] = True
            sess["_pf_error_msg"] = str(exc)
            PF_STATUS = {"ready": False, "error": str(exc), "from": _pf_import_from}
            log.exception("Failed to initialise OutcomePF; falling back to dummy model")

    pf = sess.get("pf")
    if pf is None:
        sess["_pf_dummy"] = True
        if isinstance(PF_STATUS, dict) and PF_STATUS.get("error") and not sess.get("_pf_error_msg"):
            sess["_pf_error_msg"] = PF_STATUS["error"]
        return _DummyPF()

    sess.pop("_pf_dummy", None)
    sess.pop("_pf_error_msg", None)
    return pf

# ----------------- Trial / Open -----------------
TRIAL_SECONDS = int(os.getenv("TRIAL_SECONDS", "1800"))  # 30ÂàÜÈêò
OPENCODE = os.getenv("OPENCODE", "aaa8881688")
ADMIN_LINE = os.getenv("ADMIN_LINE", "https://lin.ee/Dlm6Y3u")

def _now(): return int(time.time())

def _get_user_info(user_id):
    k = f"bgsu:{user_id}"
    if rcli:
        s = rcli.get(k)
        if s: return json.loads(s)
    return SESS.get(user_id, {})

def _set_user_info(user_id, info):
    k = f"bgsu:{user_id}"
    if rcli: rcli.set(k, json.dumps(info), ex=86400)
    SESS[user_id] = info

def _is_trial_valid(user_id):
    info = _get_user_info(user_id)
    if info.get("is_opened"): return True
    if not info.get("trial_start"): return True
    return (_now() - int(info["trial_start"])) < TRIAL_SECONDS

def _start_trial(user_id):
    info = _get_user_info(user_id)
    if info.get("is_opened"): return
    if not info.get("trial_start"):
        info["trial_start"] = _now()
        _set_user_info(user_id, info)

def _set_opened(user_id):
    info = _get_user_info(user_id)
    info["is_opened"] = True
    _set_user_info(user_id, info)

def _left_trial_sec(user_id):
    info = _get_user_info(user_id)
    if info.get("is_opened"): return "Ê∞∏‰πÖ"
    if not info.get("trial_start"): return "Â∞öÊú™ÂïüÂãï"
    left = TRIAL_SECONDS - (_now() - int(info["trial_start"]))
    return f"{left//60} ÂàÜ {left%60} Áßí" if left > 0 else "Â∑≤Âà∞Êúü"

# ----------------- Helpers -----------------
def _real(x: float) -> float:
    """Á¢∫‰øùÊòØÂØ¶Êï∏‰∏îÊúâÈôê"""
    try:
        x = np.real_if_close(x)
        if isinstance(x, np.ndarray): x = x.item()
        x = float(np.nan_to_num(x, nan=0.0, posinf=0.0, neginf=0.0))
    except Exception:
        x = 0.0
    return x

def _safe_norm(v: np.ndarray) -> np.ndarray:
    v = np.asarray(v, dtype=np.float64).reshape(-1)
    v = np.nan_to_num(v, nan=1e-9, posinf=1e-9, neginf=1e-9)
    v = np.clip(v, 1e-9, None)
    s = float(v.sum())
    if s <= 0 or not np.isfinite(s): v = np.array([0.458,0.446,0.096], dtype=np.float64); s = v.sum()
    v = (v / s).astype(np.float32)
    return v

def calculate_adjusted_confidence(ev_b, ev_p, pB, pP):
    edge = max(ev_b, ev_p)
    diff = abs(pB - pP)
    edge_term = min(1.0, _real(edge) / 0.06) ** 0.9
    prob_term = min(1.0, _real(diff) / 0.30) ** 0.85
    raw = 0.6 * edge_term + 0.4 * prob_term
    return float(max(0.0, min(1.0, raw ** 0.9)))

def get_stats_display(sess):
    mode = os.getenv("STATS_DISPLAY", "smart").strip().lower()
    if mode == "none": return None
    pred, real = sess.get("hist_pred", []), sess.get("hist_real", [])
    if not pred or not real: return "üìä Êï∏ÊìöÊî∂ÈõÜ‰∏≠..."
    bet_pairs = [(p,r) for p,r in zip(pred,real) if r in ("Ëéä","Èñí") and p in ("Ëéä","Èñí")]
    if not bet_pairs: return "üìä Â∞öÊú™ÈÄ≤Ë°å‰∏ãÊ≥®"
    hit = sum(1 for p,r in bet_pairs if p==r)
    total = len(bet_pairs)
    acc = 100.0 * hit / total
    if total >= 15: return f"üéØ ËøëÊúüÂãùÁéáÔºö{acc:.1f}%"
    if total >= 5:  return f"üéØ Áï∂ÂâçÂãùÁéáÔºö{acc:.1f}% ({hit}/{total})"
    return f"üéØ ÂàùÂßãÂãùÁéáÔºö{acc:.1f}% ({hit}/{total})"

def _format_pts_text(p_pts, b_pts):
    if p_pts == b_pts: return f"‰∏äÂ±ÄÁµêÊûú: Âíå {p_pts}"
    return f"‰∏äÂ±ÄÁµêÊûú: Èñí {p_pts} Ëéä {b_pts}"

# ----------------- Ê†∏ÂøÉÔºöËôïÁêÜÈªûÊï∏ + È†êÊ∏¨ + Ê±∫Á≠ñ -----------------
def handle_points_and_predict(sess: Dict[str,Any], p_pts: int, b_pts: int) -> str:
    # È©óË≠â
    if not (p_pts == 0 and b_pts == 0):
        if not (0 <= int(p_pts) <= 9 and 0 <= int(b_pts) <= 9):
            return "‚ùå ÈªûÊï∏Êï∏ÊìöÁï∞Â∏∏ÔºàÂÉÖÊé•Âèó 0~9Ôºâ„ÄÇË´ãÈáçÊñ∞Ëº∏ÂÖ•Ôºå‰æãÂ¶ÇÔºö65 / Âíå / Èñí6Ëéä5"

    pf = _get_pf_from_sess(sess)

    # ËºïÂ∫¶Â≠∏ÁøíÔºàÁî®‰∏ä‰∏ÄÂ±ÄËº∏Ë¥èÔºãÈªûÊï∏Ôºâ
    if p_pts == b_pts and not (p_pts == 0 and b_pts == 0):
        try: pf.update_outcome(2)
        except Exception: pass
        real_label = "Âíå"
    elif p_pts == 0 and b_pts == 0:
        try: pf.update_outcome(2)
        except Exception: pass
        real_label = "Âíå"
    else:
        try: pf.update_point_history(p_pts, b_pts)
        except Exception: pass
        outcome = 1 if p_pts > b_pts else 0
        real_label = "Èñí" if p_pts > b_pts else "Ëéä"
        try: pf.update_outcome(outcome)
        except Exception: pass

    # Êää‰∏ä‰∏ÄËº™ pending Âª∫Ë≠∞Â∞çÂ∏≥
    st = sess.setdefault("stats", {"bets":0,"wins":0,"push":0,"sum_edge":0.0,"payout":0})
    if "pending_pred" in sess:
        prev_pred = sess.pop("pending_pred")
        prev_watch = bool(sess.pop("pending_watch", False))
        prev_edge = float(sess.pop("pending_edge_ev", 0.0))
        prev_bet_amt = int(sess.pop("pending_bet_amt", 0))
        prev_ev_choice = sess.pop("pending_ev_choice", None)

        sess.setdefault("hist_pred", []).append("ËßÄÊúõ" if prev_watch else (prev_ev_choice or prev_pred))
        sess.setdefault("hist_real", []).append(real_label)
        sess["hist_pred"] = sess["hist_pred"][-150:]
        sess["hist_real"] = sess["hist_real"][-150:]

        if not prev_watch and real_label in ("Ëéä","Èñí"):
            st["bets"] += 1; st["sum_edge"] += float(prev_edge)
            if (prev_ev_choice or prev_pred) == real_label:
                if prev_ev_choice == "Ëéä":
                    BCOMM = float(os.getenv("BANKER_COMMISSION","0.05"))
                    st["payout"] += int(round(prev_bet_amt * (1.0 - BCOMM)))
                else:
                    st["payout"] += int(prev_bet_amt)
                st["wins"] += 1
            else:
                st["payout"] -= int(prev_bet_amt)
        elif real_label == "Âíå":
            st["push"] += 1

    # È†êÊ∏¨‰∏ã‰∏ÄÂ±Ä
    sims_pred = int(os.getenv("PF_PRED_SIMS","25"))
    try:
        p_raw = pf.predict(sims_per_particle=sims_pred)
        p_final = _safe_norm(p_raw)
    except Exception as e:
        log.warning("predict fallback due to %s", e)
        p_final = np.array([0.458, 0.446, 0.096], dtype=np.float32)

    # ËºïÂ∫¶Âπ≥ÊªëÔºàÈÅøÂÖçÂøΩ‰∏äÂøΩ‰∏ãÔºâ
    alpha = 0.7
    prev_sma = sess.get("prob_sma")
    if prev_sma is None:
        sess["prob_sma"] = p_final
    else:
        sess["prob_sma"] = alpha * p_final + (1 - alpha) * prev_sma
    p_final = _safe_norm(sess["prob_sma"])

    # EVÔºàÂê´ÊäΩÊ∞¥„ÄÅTieÈÄÄÂõûÔºâ
    pB, pP, pT = map(_real, (p_final[0], p_final[1], p_final[2]))
    BCOMM = float(os.getenv("BANKER_COMMISSION","0.05"))
    ev_b = _real(pB * (1.0 - BCOMM) - (1.0 - pB - pT))
    ev_p = _real(pP * 1.0            - (1.0 - pP - pT))

    # ---- ‰øÆÊ≠£„ÄéÂè™ÊäºËéä„ÄèÔºöÂÖ¨Âπ≥ÈªûÂÅèÁΩÆ + ÊâìÂπ≥ËßÄÊúõ ----
    EV_BIAS_BANKER = float(os.getenv("EV_BIAS_BANKER","0.003"))
    NEAR_DIFF_HOLD = float(os.getenv("NEAR_DIFF_HOLD","0.0025"))
    ev_b_eff = _real(ev_b - EV_BIAS_BANKER)
    ev_p_eff = _real(ev_p)

    diff_eff = abs(ev_b_eff - ev_p_eff)
    if diff_eff < NEAR_DIFF_HOLD:
        ev_choice = "ËßÄÊúõ"; edge_ev = 0.0
    else:
        ev_choice = "Ëéä" if ev_b_eff > ev_p_eff else "Èñí"
        edge_ev = max(ev_b, ev_p)

    # ËßÄÊúõÊ¢ù‰ª∂ÔºàÂÜçÁñäÂä†Ôºâ
    watch, reasons = False, []
    EDGE_ENTER_EV = float(os.getenv("EDGE_ENTER_EV","0.0015"))
    if ev_choice != "ËßÄÊúõ" and edge_ev < EDGE_ENTER_EV:
        watch = True; reasons.append("EVÂÑ™Âã¢‰∏çË∂≥")

    TIE_PROB_MAX = float(os.getenv("TIE_PROB_MAX","0.28"))
    if pT > TIE_PROB_MAX and edge_ev < 0.02:
        watch = True; reasons.append("ÂíåÂ±ÄÈ¢®Èö™")

    enter_gap_min = float(os.getenv("ENTER_GAP_MIN","0.018"))
    top2 = sorted([pB, pP, pT], reverse=True)[:2]
    if (top2[0] - top2[1]) < enter_gap_min:
        watch = True; reasons.append("ÂãùÁéáÂ∑Æ‰∏çË∂≥")

    if ev_choice == "ËßÄÊúõ": watch = True

    # ÈÖçÊ≥®ÔºàËàáÈ†êÊ∏¨ÈÇèËºØÂàÜÈñãÔºâ
    bankroll = int(sess.get("bankroll", 0))
    bet_pct = 0.0; bet_amt = 0
    if not watch:
        conf = calculate_adjusted_confidence(ev_b, ev_p, pB, pP)
        base_floor = float(os.getenv("MIN_BET_PCT_BASE", "0.02"))
        base_ceiling = 0.30
        base_pct = base_floor + (base_ceiling - base_floor) * conf
        bet_pct = max(base_floor, min(float(os.getenv("MAX_BET_PCT", "0.35")), base_pct))
        if bankroll > 0 and bet_pct > 0:
            unit = int(os.getenv("BET_UNIT", "100"))
            bet_amt = int(round(bankroll * bet_pct))
            bet_amt = max(0, int(round(bet_amt / unit)) * unit)

    # Â≠ò pending
    sess["pending_pred"] = "ËßÄÊúõ" if watch else ev_choice
    sess["pending_watch"] = bool(watch)
    sess["pending_edge_ev"] = float(edge_ev)
    sess["pending_bet_amt"] = int(bet_amt)
    sess["pending_ev_choice"] = None if watch else ev_choice

    sess["last_pts_text"] = _format_pts_text(p_pts, b_pts) if not (p_pts==0 and b_pts==0) else "‰∏äÂ±ÄÁµêÊûú: Âíå"
    stats_display = get_stats_display(sess)
    strat = f"‚ö†Ô∏è ËßÄÊúõÔºà{'„ÄÅ'.join(reasons)}Ôºâ" if watch else (
        f"üü° ‰Ωé‰ø°ÂøÉÈÖçÊ≥® {bet_pct*100:.1f}%" if bet_pct < 0.15 else
        f"üü† ‰∏≠‰ø°ÂøÉÈÖçÊ≥® {bet_pct*100:.1f}%" if bet_pct < 0.25 else
        f"üü¢ È´ò‰ø°ÂøÉÈÖçÊ≥® {bet_pct*100:.1f}%"
    )

    # Ëº∏Âá∫Ë®äÊÅØ
    msg = [
        sess["last_pts_text"],
        "ÈñãÂßãÂπ≥Ë°°ÂàÜÊûê‰∏ãÂ±Ä....",
        "",
        "„ÄêÈ†êÊ∏¨ÁµêÊûú„Äë",
        f"ÈñíÔºö{p_final[1]*100:.2f}%",
        f"ËéäÔºö{p_final[0]*100:.2f}%",
        f"ÂíåÔºö{p_final[2]*100:.2f}%",
        f"Êú¨Ê¨°È†êÊ∏¨Ôºö{'ËßÄÊúõ' if watch else ev_choice} (EVÂÑ™Âã¢: {edge_ev*100:.2f}%)",
        f"Âª∫Ë≠∞‰∏ãÊ≥®ÈáëÈ°çÔºö{bet_amt:,}",
        f"ÈÖçÊ≥®Á≠ñÁï•Ôºö{strat}",
    ]
    if sess.get("_pf_dummy"):
        warn = sess.get("_pf_error_msg") or (PF_STATUS.get("error") if isinstance(PF_STATUS, dict) else None)
        detail = f"Ôºà{warn}Ôºâ" if warn else ""
        msg.append(f"‚ö†Ô∏è È†êÊ∏¨ÂºïÊìéËºâÂÖ•Â§±ÊïóÔºåÂÉÖÊèê‰æõÈùúÊÖãÊ©üÁéá{detail}".strip())
    if stats_display: msg.append(stats_display)
    msg.extend([
        "‚Äî",
        "üîÅ ÈÄ£Á∫åÊ®°ÂºèÔºöË´ãÁõ¥Êé•Ëº∏ÂÖ•‰∏ã‰∏ÄÂ±ÄÈªûÊï∏Ôºà‰æãÔºö65 / Âíå / Èñí6Ëéä5Ôºâ",
        "‚öôÔ∏è Ëº∏ÂÖ•„ÄåË®≠ÂÆö„ÄçÂèØÈñãÂïüÂäüËÉΩÊåâÈàï"
    ])
    return "\n".join(msg)

def _format_stats(sess):
    st = sess.get("stats", {"bets":0,"wins":0,"push":0,"sum_edge":0.0,"payout":0})
    bets, wins, push, payout = st["bets"], st["wins"], st["push"], st["payout"]
    acc = (wins / bets * 100.0) if bets>0 else 0.0
    return f"üìà Á¥ØË®àÔºö‰∏ãÊ≥® {bets}ÔΩúÂëΩ‰∏≠ {wins}Ôºà{acc:.1f}%ÔºâÔΩúÂíå {push}ÔΩúÁõàËôß {payout}"

# ----------------- LINE SDK -----------------
_has_line = True
try:
    from linebot import LineBotApi, WebhookHandler
    from linebot.models import (
        MessageEvent, TextMessage, TextSendMessage,
        QuickReply, QuickReplyButton, MessageAction
    )
except Exception as e:
    _has_line = False
    LineBotApi = WebhookHandler = None
    MessageEvent = TextMessage = TextSendMessage = QuickReply = QuickReplyButton = MessageAction = object
    log.warning("LINE SDK not available, falling back to Dummy LINE mode: %s", e)

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
LINE_TIMEOUT = float(os.getenv("LINE_TIMEOUT", "2.0"))

if _has_line and LINE_CHANNEL_ACCESS_TOKEN and LINE_CHANNEL_SECRET:
    line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN, timeout=LINE_TIMEOUT)
    handler = WebhookHandler(LINE_CHANNEL_SECRET)
    LINE_MODE = "real"
else:
    LINE_MODE = "dummy"
    class _DummyHandler:
        def add(self, *a, **k):
            def deco(f): return f
            return deco
        def handle(self, body, signature):
            log.info("[DummyLINE] handle called")
    class _DummyLineAPI:
        def reply_message(self, token, message):
            try:
                txt = message.text if hasattr(message, "text") else str(message)
            except Exception:
                txt = str(message)
            log.info("[DummyLINE] reply: %s", txt)
    handler = _DummyHandler()
    line_bot_api = _DummyLineAPI()
    log.warning("LINE credentials missing or SDK unavailable; running in Dummy LINE mode.")

def _qr_btn(label, text):
    if LINE_MODE == "real":
        return QuickReplyButton(action=MessageAction(label=label, text=text))
    return {"label": label, "text": text}

def _reply(token, text, quick=None):
    try:
        if LINE_MODE == "real":
            if quick:
                line_bot_api.reply_message(
                    token,
                    TextSendMessage(text=text, quick_reply=QuickReply(items=quick))
                )
            else:
                line_bot_api.reply_message(token, TextSendMessage(text=text))
        else:
            log.info("[DummyLINE] reply%s: %s", " (with quick)" if quick else "", text)
    except Exception as e:
        log.warning("LINE reply_message error: %s", e)

def welcome_text(uid):
    left = _left_trial_sec(uid)
    return (
        "üëã Ê≠°Ëøé‰ΩøÁî® BGS AI Âπ≥Ë°°È†êÊ∏¨Á≥ªÁµ±ÔºÅ\n"
        "„Äê‰ΩøÁî®Ê≠•È©ü„Äë\n"
        "1Ô∏è‚É£ ÈÅ∏ÊìáÈ§®Âà•ÔºàËº∏ÂÖ• 1~10Ôºâ\n"
        "2Ô∏è‚É£ Ëº∏ÂÖ•Ê°åËôüÔºà‰æãÔºöDG01Ôºâ\n"
        "3Ô∏è‚É£ Ëº∏ÂÖ•Êú¨ÈáëÔºà‰æãÔºö5000Ôºâ\n"
        "4Ô∏è‚É£ ÊØèÂ±ÄÂõûÂ†±ÈªûÊï∏Ôºà‰æãÔºö65 / Âíå / Èñí6Ëéä5Ôºâ\n"
        f"üíæ Ë©¶Áî®Ââ©È§òÔºö{left}\n\n"
        "„ÄêË´ãÈÅ∏ÊìáÈÅäÊà≤È§®Âà•„Äë\n"
        "1. WM\n2. PM\n3. DG\n4. SA\n5. KU\n"
        "6. Ê≠êÂçö/Âç°Âà©\n7. KG\n8. ÈáëÂà©\n9. Âêç‰∫∫\n10. MTÁúü‰∫∫\n"
        "(Ë´ãÁõ¥Êé•Ëº∏ÂÖ•Êï∏Â≠ó1-10)"
    )

def settings_quickreply(sess) -> list:
    return [
        _qr_btn("ÈÅ∏È§®Âà•", "Ë®≠ÂÆö È§®Âà•"),
        _qr_btn("Êü•ÁúãÁµ±Ë®à", "Êü•ÁúãÁµ±Ë®à"),
        _qr_btn("Ë©¶Áî®Ââ©È§ò", "Ë©¶Áî®Ââ©È§ò"),
        _qr_btn("ÈáçË®≠ÊµÅÁ®ã", "ÈáçË®≠"),
    ]

def halls_quickreply() -> list:
    return [_qr_btn(f"{i}", f"{i}") for i in range(1, 11)]

# ----------------- HTTP routes -----------------
if _has_flask:
    @app.get("/health")
    def health():
        return jsonify(
            ok=True,
            ts=time.time(),
            msg="API normal - Balanced Mode",
            pf_status=PF_STATUS,
            line_mode=("real" if (LINE_CHANNEL_ACCESS_TOKEN and LINE_CHANNEL_SECRET and _has_line) else "dummy"),
        ), 200

    @app.get("/version")
    def version():
        return jsonify(
            version=os.getenv("RELEASE", "local"),
            commit=os.getenv("GIT_SHA", "unknown"),
            mode="balanced"
        ), 200

    @app.post("/line-webhook")
    def callback():
        signature = request.headers.get('X-Line-Signature', '')
        body = request.get_data(as_text=True)
        try:
            handler.handle(body, signature)
        except Exception as e:
            log.warning("LINE webhook error: %s", e)
            return "bad request", 400
        return "ok", 200

# ‚Äî‚Äî LINE ‰∫ã‰ª∂ËôïÁêÜ ‚Äî‚Äî #
def _handle_message_core(event):
    user_id = getattr(getattr(event, "source", None), "user_id", None)
    text = getattr(getattr(event, "message", None), "text", "")
    if user_id is None: user_id = "dummy-user"
    text = (text or "").strip()

    _start_trial(user_id)

    if text.startswith("ÈñãÈÄö"):
        pwd = text[2:].strip()
        reply = "‚úÖ Â∑≤ÈñãÈÄöÊàêÂäüÔºÅ" if pwd == OPENCODE else "‚ùå ÈñãÈÄöÁ¢ºÈåØË™§ÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•„ÄÇ"
        if pwd == OPENCODE: _set_opened(user_id)
        _reply(event.reply_token, reply, quick=settings_quickreply(SESS.setdefault(user_id, {})))
        return

    if not _is_trial_valid(user_id):
        _reply(event.reply_token, "‚õî Ë©¶Áî®ÊúüÂ∑≤Âà∞\nüì¨ Ë´ãËÅØÁπ´ÁÆ°ÁêÜÂì°ÈñãÈÄöÁôªÂÖ•Â∏≥Ëôü\nüëâ Âä†ÂÖ•ÂÆòÊñπ LINEÔºö{}".format(ADMIN_LINE))
        return

    sess = SESS.setdefault(user_id, {"bankroll": 0})
    sess["user_id"] = user_id

    if text in ("Ë®≠ÂÆö","‚ãØ","menu","Menu"):
        _reply(event.reply_token, "‚öôÔ∏è Ë®≠ÂÆöÈÅ∏ÂñÆÔºö", quick=settings_quickreply(sess)); return
    if text == "Êü•ÁúãÁµ±Ë®à":
        _reply(event.reply_token, _format_stats(sess), quick=settings_quickreply(sess)); return
    if text == "Ë©¶Áî®Ââ©È§ò":
        _reply(event.reply_token, "‚è≥ Ë©¶Áî®Ââ©È§òÔºö{}".format(_left_trial_sec(user_id)), quick=settings_quickreply(sess)); return
    if text == "ÈáçË®≠":
        SESS[user_id] = {"bankroll": 0, "user_id": user_id}
        _reply(event.reply_token, "‚úÖ Â∑≤ÈáçË®≠ÊµÅÁ®ãÔºåË´ãÈÅ∏ÊìáÈ§®Âà•Ôºö", quick=halls_quickreply()); return

    # È§®Âà• -> Ê°åËôü -> Êú¨Èáë
    if not sess.get("hall_id"):
        if text.isdigit() and 1 <= int(text) <= 10:
            sess["hall_id"] = int(text)
            hall_map = ["WM", "PM", "DG", "SA", "KU", "Ê≠êÂçö/Âç°Âà©", "KG", "ÈáëÂà©", "Âêç‰∫∫", "MTÁúü‰∫∫"]
            hall_name = hall_map[int(text)-1]
            _reply(event.reply_token, f"‚úÖ Â∑≤ÈÅ∏ [{hall_name}]\nË´ãËº∏ÂÖ•Ê°åËôüÔºà‰æãÔºöDG01ÔºåÊ†ºÂºèÔºö2Â≠óÊØç+2Êï∏Â≠óÔºâ", quick=settings_quickreply(sess))
        elif text == "Ë®≠ÂÆö È§®Âà•":
            _reply(event.reply_token, "Ë´ãÈÅ∏ÊìáÈ§®Âà•Ôºà1-10ÔºâÔºö", quick=halls_quickreply())
        else:
            _reply(event.reply_token, welcome_text(user_id), quick=halls_quickreply())
        return

    if not sess.get("table_id"):
        m = re.match(r"^[a-zA-Z]{2}\d{2}$", text)
        if m:
            sess["table_id"] = text.upper()
            _reply(event.reply_token, f"‚úÖ Â∑≤Ë®≠Ê°åËôü [{sess['table_id']}]\nË´ãËº∏ÂÖ•ÊÇ®ÁöÑÊú¨ÈáëÔºà‰æãÔºö5000Ôºâ", quick=settings_quickreply(sess))
        else:
            _reply(event.reply_token, "Ë´ãËº∏ÂÖ•Ê≠£Á¢∫Ê†ºÂºèÁöÑÊ°åËôüÔºà‰æãÔºöDG01ÔºåÊ†ºÂºèÔºö2Â≠óÊØç+2Êï∏Â≠óÔºâ", quick=settings_quickreply(sess))
        return

    if not sess.get("bankroll") or sess["bankroll"] <= 0:
        m = re.match(r"^(\d{3,7})$", text)
        if m:
            sess["bankroll"] = int(text)
            _reply(event.reply_token, f"üëç Â∑≤Ë®≠ÂÆöÊú¨ÈáëÔºö{sess['bankroll']:,}\nË´ãËº∏ÂÖ•‰∏ä‰∏ÄÂ±ÄÈªûÊï∏ÈñãÂßãÂπ≥Ë°°È†êÊ∏¨", quick=settings_quickreply(sess))
        else:
            _reply(event.reply_token, "Ë´ãËº∏ÂÖ•Ê≠£Á¢∫Ê†ºÂºèÁöÑÊú¨ÈáëÔºà‰æãÔºö5000Ôºâ", quick=settings_quickreply(sess))
        return

    # ÈÄ£Á∫åÊ®°Âºè
    try:
        if text.strip() == "Âíå":
            reply = handle_points_and_predict(sess, 0, 0)
        elif re.fullmatch(r"\d{2}", text):
            p_pts, b_pts = int(text[0]), int(text[1])
            reply = handle_points_and_predict(sess, p_pts, b_pts)
        elif re.search("Èñí(\d+).*Ëéä(\d+)", text):
            mm = re.search("Èñí(\d+).*Ëéä(\d+)", text)
            reply = handle_points_and_predict(sess, int(mm.group(1)), int(mm.group(2)))
        elif re.search("Ëéä(\d+).*Èñí(\d+)", text):
            mm = re.search("Ëéä(\d+).*Èñí(\d+)", text)
            reply = handle_points_and_predict(sess, int(mm.group(2)), int(mm.group(1)))
        else:
            reply = "Ë´ãËº∏ÂÖ•Ê≠£Á¢∫Ê†ºÂºèÔºå‰æãÂ¶Ç 65ÔºàÈñí6Ëéä5ÔºâÔºåÊàñ„ÄéÈñí6Ëéä5ÔºèËéä5Èñí6ÔºèÂíå„Äè"
    except Exception as e:
        reply = f"‚ùå Ëº∏ÂÖ•Ê†ºÂºèÊúâË™§: {e}"

    _reply(event.reply_token, reply, quick=settings_quickreply(sess))

if 'LINE_MODE' in globals() and LINE_MODE == "real":
    @handler.add(MessageEvent, message=TextMessage)
    def handle_message(event):
        _handle_message_core(event)

# ----------------- Run -----------------
if __name__ == "__main__":
    port = int(os.getenv("PORT","8000"))
    log.info("Starting BGS-Balanced on port %s (LINE_MODE=%s)", port,
             "real" if (LINE_CHANNEL_ACCESS_TOKEN and LINE_CHANNEL_SECRET and _has_line) else "dummy")
    if hasattr(app, "run"):
        app.run(host="0.0.0.0", port=port, debug=False)
